  Wed Apr 14 2021  0:03                                                                                                    Page 1


                                               ***************************************
                                               **      WDC 65C02 Macro Assembler    **
                                               **                                   **
                                               **     Version 3.49.1- Feb  6 2006    **
                                               ***************************************

     1                                globals on
     2                                case    off
     3                                chip    W65C02S
     4                                pw      132
     5                                pl      66
     6                        ;
     7                        ;SUBMIT V3.00
     8                        ;DOS/65 program to create $$$.SUB file from source file of type SUB and with
     9                        ;parameter substitution. This program is based on the CP/M program of the same
    10                        ;name.
    11                        ;SUBMIT will only work with the CCM of DOS/65 V3 or later.
    12                        ;Rewritten for WDC Tools - KM
    13                        ; uses CMOS instructions and addressing modes.
    14                        ; changes as of 14 April 2021 - KM
    15                        ;
    16                        ;released:              23 February 2015 (V3.00)
    17                        ;
    18                        ;DOS/65 constants
    19             00000030   pzstrt  EQU     $30                     ;page zero start
    20             00000103   PEM     EQU     $103
    21             00000107   DflFCB  EQU     $107
    22             00000128   DflBuf  EQU     $128
    23             00000800   tea     EQU     $800
    24             00001000   BufLng  EQU     4096                    ;output buffer (rbuff) length
    25                        ;ASCII definitions
    26             0000000A   lf      EQU     $0A                     ;linefeed
    27             0000000D   cr      EQU     $0D                     ;carriage return
    28             0000001A   eof     EQU     $1A                     ;end of file
    29                        ;
    30                                page0
    31                        ;page zero variables
    32                                org     pzstrt                  ;start after HW registers
    33                        ErrMs                                   ;address of error message
    34 00:0030:                      defs    2
    35                        ;variables for MOVE
    36                        from                                    ;from pointer in MOVE
    37 00:0032:                      defs    2
    38                        to                                      ;to pointer in MOVE
    39 00:0034:                      defs    2
    40                        bbyte                                   ;b byte value in GetSrc
    41 00:0036:                      defs    1
    42                        sbp                                     ;SUB buffer pointer
    43 00:0037:                      defs    1
    44                        rbp                                     ;pointer into rbuff
    45 00:0038:                      defs    2
    46                        rlen
    47 00:003A:                      defs    1
    48                        ss
    49 00:003B:                      defs    1
    50                        ssbp
    51 00:003C:                      defs    1
    52                        PutRIn
    53 00:003D:                      defs    1
    54                        readng                                  ;flag = 255 if reading source, 0 not
    55 00:003E:                      defs    1
    56                        b                                       ;character active in fillrbuff
    57 00:003F:                      defs    1
  Wed Apr 14 2021  0:03                                                                                                    Page 2


    58                        ichar                                   ;single char and index in makefile
    59 00:0040:                      defs    1
    60                        
    61 00:0041:                      ends
    62                        ;
    63                                code
    64                        
    65                        ;code section
    66                                org     tea
    67                        ;main code - simple and straightforward
    68 00:0800: A9 15                lda     #<openms                ;send opening message
    69 00:0802: A0 08                ldy     #>openms
    70 00:0804: 20 DF 08             jsr     MsgOut
    71 00:0807: 20 34 09             jsr     SETUP                   ;get everything ready
    72 00:080A: 20 E0 09             jsr     FillRB                  ;get and process source
    73 00:080D: 20 E9 0A             jsr     MkFile                  ;prepare and save $$$.sub
    74 00:0810: A2 00        boot    ldx     #0                      ;must end with warm boot
    75 00:0812: 4C 03 01             jmp     pem                     ;using PEM
    76                        ;messages and strings
    77 00:0815: 44 4F 53 2F  OpenMs  .byte   'DOS/65 SUBMIT V3.00$'
       00:0819: 36 35 20 53 
       00:081D: 55 42 4D 49 
       00:0821: 54 20 56 33 
       00:0825: 2E 30 30 24 
    78 00:0829: 0D 0A 24     CRLFMs  .byte   cr,lf,'$'
    79 00:082C: 45 72 72 6F  ERRLMs  .byte   'Error On Line $'
       00:0830: 72 20 4F 6E 
       00:0834: 20 4C 69 6E 
       00:0838: 65 20 24 
    80 00:083B: 53 55 42     SUBStr  .byte   'SUB'
    81 00:083E: 4E 6F 20 2E  NSUBMs  .byte   'No .SUB File Present$'
       00:0842: 53 55 42 20 
       00:0846: 46 69 6C 65 
       00:084A: 20 50 72 65 
       00:084E: 73 65 6E 74 
       00:0852: 24 
    82 00:0853: 44 69 73 6B  WrErMs  .byte   'Disk Write Error$'
       00:0857: 20 57 72 69 
       00:085B: 74 65 20 45 
       00:085F: 72 72 6F 72 
       00:0863: 24 
    83 00:0864: 43 6F 6D 6D  BfOvMs  .byte   'Command Buffer Overflow$'
       00:0868: 61 6E 64 20 
       00:086C: 42 75 66 66 
       00:0870: 65 72 20 4F 
       00:0874: 76 65 72 66 
       00:0878: 6C 6F 77 24 
    84 00:087C: 43 6F 6D 6D  ToLnMs  .byte   'Command Too Long$'
       00:0880: 61 6E 64 20 
       00:0884: 54 6F 6F 20 
       00:0888: 4C 6F 6E 67 
       00:088C: 24 
    85 00:088D: 50 61 72 61  PrmEMs  .byte   'Parameter Error$'
       00:0891: 6D 65 74 65 
       00:0895: 72 20 45 72 
       00:0899: 72 6F 72 24 
    86 00:089D: 49 6E 76 61  IvClMs  .byte   'Invalid Control Character$'
       00:08A1: 6C 69 64 20 
       00:08A5: 43 6F 6E 74 
       00:08A9: 72 6F 6C 20 
       00:08AD: 43 68 61 72 
       00:08B1: 61 63 74 65 
       00:08B5: 72 24 
  Wed Apr 14 2021  0:03                                                                                                    Page 3


    87 00:08B7: 44 69 72 65  DrFlMs  .byte   'Directory Full$'
       00:08BB: 63 74 6F 72 
       00:08BF: 79 20 46 75 
       00:08C3: 6C 6C 24 
    88 00:08C6: 43 61 6E 6E  NoClMs  .byte   'Cannot Close, Read/Only?$'
       00:08CA: 6F 74 20 43 
       00:08CE: 6C 6F 73 65 
       00:08D2: 2C 20 52 65 
       00:08D6: 61 64 2F 4F 
       00:08DA: 6E 6C 79 3F 
       00:08DE: 24 
    89                        ;
    90                        ;send message pointed to by AY to console
    91 00:08DF: A2 09        MsgOut  ldx     #9                      ;send message out command
    92 00:08E1: 4C 03 01             jmp     PEM
    93                        ;
    94                        ;open file with FCB at AY
    95 00:08E4: A2 0F        OPEN    ldx     #15
    96 00:08E6: 4C 03 01             jmp     PEM
    97                        ;
    98                        ;close file with FCB at AY
    99 00:08E9: A2 10        CLOSE   ldx     #16
   100 00:08EB: 4C 03 01             jmp     PEM
   101                        ;
   102                        ;delete file with FCB at AY
   103 00:08EE: A2 13        DELETE  ldx     #19
   104 00:08F0: 4C 03 01             jmp     PEM
   105                        ;
   106                        ;read from file
   107 00:08F3: A2 14        READ    ldx     #20
   108 00:08F5: 4C 03 01             jmp     PEM
   109                        ;
   110                        ;write to file
   111 00:08F8: A2 15        WRITE   ldx     #21
   112 00:08FA: 4C 03 01             jmp     PEM
   113                        ;
   114                        ;create file
   115 00:08FD: A2 16        MAKE    ldx     #22
   116 00:08FF: 4C 03 01             jmp     PEM
   117                        ;
   118                        ;move(from,to,n)
   119                        ;source address (from)
   120                        ;destination address (to)
   121                        ;count (n)
   122                        ;Parameters are passed as follows:
   123                        ;x=n
   124                        ;a=low of to
   125                        ;y=high of to
   126                        ;from must be set by calling routine
   127 00:0902: 85 34        move    sta     to                      ;save to
   128 00:0904: 84 35                sty     to+1
   129 00:0906: A0 00                ldy     #0
   130 00:0908: B1 32        movelp  lda     (from),y                ;get byte
   131 00:090A: 91 34                sta     (to),y                  ;put byte
   132 00:090C: C8                   iny
   133 00:090D: CA                   dex                             ;drop count
   134 00:090E: D0 F8                bne     movelp                  ;loop if more
   135 00:0910: 60                   rts
   136                        ;
   137                        ;general error handling routine
   138                        ;INPUT: Specific message address = AY
   139                        ;OUTPUT: none
   140 00:0911: 85 30        ERROR   sta     ErrMs                   ;save error line
  Wed Apr 14 2021  0:03                                                                                                    Page 4


   141 00:0913: 84 31                sty     ErrMs+1
   142 00:0915: A9 29                lda     #<crlfms
   143 00:0917: A0 08                ldy     #>crlfms                ;send CR & LF to console
   144 00:0919: 20 DF 08             jsr     MsgOut
   145 00:091C: A9 2C                lda     #<ERRLMs                ;send main error message
   146 00:091E: A0 08                ldy     #>ERRLMs
   147 00:0920: 20 DF 08             jsr     MsgOut
   148 00:0923: A9 50                lda     #<LneNum                ;point to line # structure
   149 00:0925: A0 0B                ldy     #>LneNum
   150 00:0927: 20 DF 08             jsr     MsgOut                  ;send to console
   151 00:092A: A5 30                lda     ErrMs                   ;point to specific message
   152 00:092C: A4 31                ldy     ErrMs+1
   153 00:092E: 20 DF 08             jsr     msgout                  ;send to console
   154 00:0931: 4C 10 08             jmp     boot                    ;back to CCM
   155                        ;
   156                        ;set up the various pointers, counters, buffers, etc.
   157 00:0934: A9 29        SETUP   lda     #<dflbuf+1              ;point to second position
   158 00:0936: A0 01                ldy     #>dflbuf
   159 00:0938: 85 32                sta     from
   160 00:093A: 84 33                sty     from+1
   161 00:093C: A2 7F                ldx     #127
   162 00:093E: A9 76                lda     #<sstrng
   163 00:0940: A0 0B                ldy     #>sstrng
   164 00:0942: 20 02 09             jsr     move
   165 00:0945: AE 28 01             ldx     DflBuf                  ;get first byte = length
   166                        ;        lda     #0                      ;get zero
   167 00:0948: 9E 76 0B             stz     sstrng,x                ;insert 0 to mark end
   168 00:094B: A9 3B                lda     #<SUBStr
   169 00:094D: A0 08                ldy     #>SUBStr
   170 00:094F: 85 32                sta     from
   171 00:0951: 84 33                sty     from+1
   172 00:0953: A2 03                ldx     #3                      ;move 3 bytes
   173 00:0955: A9 10                lda     #<dflfcb+9              ;get low
   174 00:0957: A0 01                ldy     #>dflfcb                ;get high
   175 00:0959: 20 02 09             jsr     move                    ;do the move
   176 00:095C: A9 F6                lda     #<DskBuf                ;set disk buffer
   177 00:095E: A0 0B                ldy     #>DskBuf                ;to local
   178 00:0960: A2 1A                ldx     #26
   179 00:0962: 20 03 01             jsr     PEM
   180 00:0965: A9 07                lda     #<dflfcb
   181 00:0967: A0 01                ldy     #>dflfcb                ;point to default FCB
   182 00:0969: 20 E4 08             jsr     OPEN                    ;and open file
   183 00:096C: C9 FF                cmp     #255                    ;check for error
   184 00:096E: D0 06                bne     STUPOK                  ;jump ahead if none
   185 00:0970: A9 3E                lda     #<nsubms                ;no SUB file
   186 00:0972: A0 08                ldy     #>nsubms
   187 00:0974: 80 9B                bra     ERROR                   ;do error handler
   188 00:0976: A9 80        STUPOK  lda     #128                    ;set buffer pointer to
   189 00:0978: 85 37                sta     sbp                     ;to force read later
   190 00:097A: 60                   rts
   191                        ;
   192                        ;GetSrc - get single byte from source file
   193 00:097B: A6 37        GetSrc  ldx     sbp                     ;get buffer index
   194 00:097D: 10 10                bpl     USESBP                  ;use if 0-127
   195 00:097F: A9 07                lda     #<DflFCB                ;else point to FCB
   196 00:0981: A0 01                ldy     #>DflFCB
   197 00:0983: 20 F3 08             jsr     read                    ;get record
   198 00:0986: C9 00                cmp     #0                      ;check return code
   199 00:0988: F0 03                beq     CLRSBP                  ;if OK clear pointer
   200 00:098A: A9 1A                lda     #eof                    ;else return end of file
   201 00:098C: 60                   rts
   202                        ;start record read at start of buffer
   203                        CLRSBP  ; lda     #0                      ;clear sbp
  Wed Apr 14 2021  0:03                                                                                                    Page 5


   204 00:098D: 64 37                stz     sbp
   205                        ;sbp is now 0 to 127 - we are ready to read byte
   206 00:098F: A6 37        USESBP  ldx     sbp                     ;get index
   207 00:0991: E6 37                inc     sbp                     ;bump for next
   208 00:0993: BD F6 0B             lda     DskBuf,x                ;get char from buffer
   209 00:0996: 85 36                sta     bbyte                   ;and save
   210 00:0998: C9 0D                cmp     #cr                     ;see if carriage return
   211 00:099A: D0 21                bne     BNOTCR                  ;if not skip ahead
   212 00:099C: EE 52 0B             inc     LN3                     ;if is bump LSD of line number
   213 00:099F: AD 52 0B             lda     LN3                     ;get digit
   214 00:09A2: C9 3A                cmp     #'9'+1                  ;see if over '9'
   215 00:09A4: 90 17                bcc     bnotcr                  ;not so use as is
   216 00:09A6: A9 30                lda     #'0'                    ;but if is reset to '0'
   217 00:09A8: 8D 52 0B             sta     ln3
   218 00:09AB: EE 51 0B             inc     ln2                     ;bump middle digit
   219 00:09AE: AD 51 0B             lda     ln2                     ;then get it
   220 00:09B1: C9 3A                cmp     #'9'+1                  ;and check it
   221 00:09B3: 90 08                bcc     bnotcr                  ;skip ahead if 0 to 9
   222 00:09B5: A9 30                lda     #'0'                    ;else reset middle digit
   223 00:09B7: 8D 51 0B             sta     ln2
   224 00:09BA: EE 50 0B             inc     ln1                     ;then bump LSD
   225 00:09BD: A5 36        BNOTCR  lda     bbyte                   ;get char back
   226                        ;convert to upper case
   227 00:09BF: C9 61                cmp     #'a'                    ;not lower if a <
   228 00:09C1: 90 08                bcc     notlc
   229 00:09C3: C9 7B                cmp     #'z'+1                  ;not lower if a >=
   230 00:09C5: B0 04                bcs     notlc
   231 00:09C7: 29 5F                and     #$5f                    ;convert to upper
   232 00:09C9: 85 36                sta     bbyte                   ;save it
   233 00:09CB: A5 36        NOTLC   lda     bbyte                   ;return it
   234 00:09CD: 60           WRBFOK  rts
   235                        ;
   236                        ;WrtBuf - write disk buffer to disk file
   237 00:09CE: A9 55        WrtBuf  lda     #<OutFCB                ;point to FCB
   238 00:09D0: A0 0B                ldy     #>OutFCB
   239 00:09D2: 20 F8 08             jsr     WRITE
   240 00:09D5: C9 00                cmp     #0                      ;check for OK return
   241 00:09D7: F0 F4                beq     WRBFOK                  ;if 0 OK
   242 00:09D9: A9 53                lda     #<WrErMs                ;else say write error
   243 00:09DB: A0 08                ldy     #>WrErMs
   244 00:09DD: 4C 11 09             jmp     ERROR
   245                        ;WRBFOK  rts
   246                        ;
   247                        ;Routine that reads source file and does parameter replacement
   248                        ;b is the character being processed
   249                        FillRB  ; lda     #0                      ;rbuff(0) <-- 0
   250 00:09E0: 9C 76 0C             stz     rbuff                   ;put "stopper" in buffer
   251 00:09E3: A9 76                lda     #<rbuff
   252 00:09E5: A0 0C                ldy     #>rbuff                 ;set rbp to start of rbuff
   253 00:09E7: 85 38                sta     rbp                     ;rbp <-- rbuff
   254 00:09E9: 84 39                sty     rbp+1
   255 00:09EB: A9 FF                lda     #255                    ;reading <-- TRUE
   256 00:09ED: 85 3E                sta     readng
   257                        ;do while reading TRUE
   258 00:09EF: A5 3E        DOLp00  lda     readng                  ;test reading flag
   259 00:09F1: D0 03                bne     L01                     ;continue if TRUE
   260 00:09F3: 4C A9 0A             jmp     XLp00                   ;if FALSE exit
   261                        L01     ; lda     #0                      ;rlen <-- 0 that
   262 00:09F6: 64 3A                stz     rlen                    ;reset cmd length
   263                        ;do while (b<--getsource) <> eof and b <> cr
   264 00:09F8: 20 7B 09     DOLp01  jsr     GetSrc                  ;get character from source
   265 00:09FB: 85 3F                sta     b                       ;save it
   266                        ;now check if EOF or CR
  Wed Apr 14 2021  0:03                                                                                                    Page 6


   267 00:09FD: C9 1A                cmp     #eof                    ;see if EOF
   268 00:09FF: D0 03                bne     L02
   269 00:0A01: 4C 82 0A             jmp     XLp01                   ;if so done
   270 00:0A04: C9 0D        L02     cmp     #cr                     ;now check for CR
   271 00:0A06: D0 03                bne     IfLp02
   272 00:0A08: 4C 82 0A             jmp     Xlp01                   ;if so done
   273                        ;if b<>lf then
   274 00:0A0B: A5 3F        IFLP02  lda     b                       ;get saved
   275 00:0A0D: C9 0A                cmp     #lf                     ;see if LF
   276 00:0A0F: F0 E7                beq     DoLp01                  ;if so start again
   277                        ;see if $
   278 00:0A11: C9 24                cmp     #'$'
   279 00:0A13: D0 43                bne     Else3a                  ;is not so test ^
   280                        ;if (b<--GetSrc) = $
   281 00:0A15: 20 7B 09             jsr     GetSrc                  ;get next
   282 00:0A18: 85 3F                sta     b                       ;save it
   283 00:0A1A: C9 24                cmp     #'$'                    ;see if double
   284 00:0A1C: D0 05                bne     Else3b                  ;jump if not
   285 00:0A1E: 20 BA 0A             jsr     PutRBf                  ;insert single $
   286 00:0A21: 80 D5                bra     DoLp01
   287                        ;not double $
   288 00:0A23: A5 3F        Else3b  lda     b                       ;prepare for subtract
   289                        ;if (b <-- b-'0')
   290 00:0A25: 38                   sec                             ;use subtraction
   291 00:0A26: E9 30                sbc     #'0'                    ;subtract ASCII 0
   292                        ;the previous line made b a parameter counter
   293 00:0A28: 85 3F                sta     b                       ;save result (1 to 9)
   294 00:0A2A: C9 0A                cmp     #9+1                    ;carry clear if a < 10
   295                        ;if result <= 9 then OK else a parameter error
   296 00:0A2C: 90 07                bcc     Else3c                  ;then continue
   297 00:0A2E: A9 8D                lda     #<PrmEMs                ;else parameter error
   298 00:0A30: A0 08                ldy     #>PrmEMs
   299 00:0A32: 4C 11 09             jmp     ERROR
   300                        ;looks like parameter so find string b in sstrng
   301                        Else3c  ; lda     #0                      ;ssbp <-- 0
   302 00:0A35: 64 3C                stz     ssbp                    ;start at string start
   303 00:0A37: 20 AD 0A             jsr     DeBPrm                  ;find next non-blank
   304                        ;do while b<>0
   305 00:0A3A: A5 3F        Else3d  lda     b                       ;get char
   306 00:0A3C: F0 0C                beq     Else3e                  ;end if zero
   307 00:0A3E: C6 3F                dec     b                       ;b <-- b-1
   308 00:0A40: 20 96 0A     Else3f  jsr     notend                  ;scan
   309 00:0A43: D0 FB                bne     Else3f                  ;until end
   310 00:0A45: 20 AD 0A             jsr     DeBPrm                  ;then skip spaces
   311 00:0A48: 80 F0                bra     Else3d                  ;loop until b=0
   312                        ;ready to copy substitute string to RBuff
   313 00:0A4A: 20 96 0A     Else3e  jsr     notend                  ;check for end
   314 00:0A4D: F0 07                beq     Else3g                  ;done if END
   315 00:0A4F: A5 3B                lda     ss                      ;get char
   316 00:0A51: 20 BA 0A             jsr     PUTRBF                  ;insert in RBuff
   317 00:0A54: 80 F4                bra     Else3e                  ;loop for Do While
   318 00:0A56: 80 A0        Else3g  bra     DoLp01
   319                        ;
   320                        ;else if b=^
   321 00:0A58: C9 5E        Else3a  cmp     #'^'                    ;see if control
   322 00:0A5A: D0 1E                bne     Else3j                  ;if not just copy
   323 00:0A5C: 20 7B 09             jsr     GetSrc                  ;get next char
   324 00:0A5F: 38                   sec                             ;b <-- b-'A'
   325 00:0A60: E9 41                sbc     #'A'
   326 00:0A62: 85 3F                sta     b                       ;and save
   327 00:0A64: C9 1A                cmp     #26                     ;make sure A to Z
   328 00:0A66: 90 07                bcc     Else3h                  ;OK if < 26
   329 00:0A68: A9 9D                lda     #<IvClMs                ;else invalid control char error
  Wed Apr 14 2021  0:03                                                                                                    Page 7


   330 00:0A6A: A0 08                ldy     #>IvClMs
   331 00:0A6C: 4C 11 09             jmp     error                   ;error exit
   332 00:0A6F: A5 3F        Else3h  lda     b                       ;get char back
   333 00:0A71: 18                   clc                             ;bump by one
   334 00:0A72: 69 01                adc     #1
   335 00:0A74: 20 BA 0A             jsr     PutRBf                  ;put in output buffer
   336 00:0A77: 4C F8 09             jmp     DoLp01                  ;and loop
   337                        ;was neither $ nor ^
   338 00:0A7A: A5 3F        Else3j  lda     b
   339 00:0A7C: 20 BA 0A             jsr     PutRBf                  ;so just transfer char
   340 00:0A7F: 4C F8 09             jmp     DOLp01                  ;then loop
   341                        ;
   342 00:0A82: A2 FF        XLp01   ldx     #255                    ;preset for readng
   343 00:0A84: A5 3F                lda     b                       ;get character
   344 00:0A86: C9 0D                cmp     #cr                     ;see if cr
   345 00:0A88: F0 02                beq     L05                     ;if so go ahead
   346 00:0A8A: A2 00                ldx     #0                      ;if not say readng false
   347 00:0A8C: 86 3E        L05     stx     readng
   348 00:0A8E: A5 3A                lda     rlen                    ;store length
   349 00:0A90: 20 BA 0A             jsr     PutRBf
   350 00:0A93: 4C EF 09             jmp     DOLp00                  ;loop
   351                        ;XLp00   rts
   352                        ;
   353                        ;notend
   354                        ;Return true if next char in substitute string not at end of string
   355                        ;Also returns character in ss and if NOTEND returns tru pointer (ssbp)
   356                        ;is advanced by one.
   357 00:0A96: A6 3C        NOTEND  ldx     ssbp                    ;get pointer or index
   358 00:0A98: BD 76 0B             lda     sstrng,x                ;get character
   359 00:0A9B: 85 3B                sta     ss                      ;save
   360 00:0A9D: C9 20                cmp     #' '                    ;see if space
   361 00:0A9F: F0 09                beq     NotEnF                  ;if space is end so notend false
   362 00:0AA1: C9 00                cmp     #0                      ;see if zero
   363 00:0AA3: F0 05                beq     NotEnF                  ;if 0 is end so notend false
   364                        ;NOTEND is true
   365 00:0AA5: E6 3C                inc     ssbp                    ;ssbp <-- ssbp+1
   366 00:0AA7: A9 FF                lda     #255                    ;return true
   367 00:0AA9: 60           XLp00   rts
   368 00:0AAA: A9 00        NotEnF  lda     #0                      ;return false
   369 00:0AAC: 60           NBChar  rts
   370                        ;
   371                        ;DeBPrm - move to next non-blank substitute string char
   372 00:0AAD: A6 3C        DeBPrm  ldx     ssbp
   373 00:0AAF: BD 76 0B             lda     sstrng,x                ;get char
   374 00:0AB2: C9 20                cmp     #' '                    ;see if space
   375 00:0AB4: D0 F6                bne     NBChar                  ;done if not
   376 00:0AB6: E6 3C                inc     ssbp                    ;else bump index
   377 00:0AB8: 80 F3                bra     DeBPrm                  ;and loop
   378                        ;NBChar  rts
   379                        ;
   380                        ;PutRBf
   381                        ;INPUT: byte in A
   382 00:0ABA: 85 3D        PutRBf  sta     PutRIn                  ;save inout character
   383 00:0ABC: E6 38                inc     rbp                     ;bump pointer
   384 00:0ABE: D0 02                bne     rbpok                   ;skip high
   385 00:0AC0: E6 39                inc     rbp+1                   ;else bump high
   386 00:0AC2: 38           rbpok   sec
   387 00:0AC3: A5 38                lda     rbp                     ;check for too big
   388 00:0AC5: E9 76                sbc     #<lastrb
   389 00:0AC7: A5 39                lda     rbp+1
   390 00:0AC9: E9 1C                sbc     #>lastrb
   391 00:0ACB: 90 07                bcc     RBPLEn                  ;OK if less than end + 1
   392 00:0ACD: A9 64                lda     #<BfOvMs                ;else buffer overflow
  Wed Apr 14 2021  0:03                                                                                                    Page 8


   393 00:0ACF: A0 08                ldy     #>BfOvMs
   394 00:0AD1: 4C 11 09             jmp     ERROR
   395 00:0AD4: A0 00        RBPLEn  ldy     #0                      ;clear index
   396 00:0AD6: A5 3D                lda     PutRIn                  ;get character back
   397 00:0AD8: 91 38                sta     (rbp),y                 ;put in buffer
   398 00:0ADA: E6 3A                inc     rlen
   399 00:0ADC: A5 3A                lda     rlen                    ;bump and get record length
   400 00:0ADE: C9 7E                cmp     #126                    ;compare to max
   401 00:0AE0: 90 CA                bcc     NBChar                  ;OK if <126
   402 00:0AE2: A9 7C                lda     #<ToLnMs                ;else too long error
   403 00:0AE4: A0 08                ldy     #>ToLnMs
   404 00:0AE6: 4C 11 09             jmp     ERROR
   405                        ;CMDLOK  rts
   406                        ;
   407                        ;MkFile creates the active command file.
   408 00:0AE9: A9 55        MkFile  lda     #<OutFCB                ;point to FCB
   409 00:0AEB: A0 0B                ldy     #>OutFCB
   410 00:0AED: 20 EE 08             jsr     DELETE                  ;delete it
   411                        ;        lda     #0                      ;clear record number
   412 00:0AF0: 9C 75 0B             stz     drec
   413 00:0AF3: 9C 61 0B             stz     dext                    ;and extent
   414 00:0AF6: A9 55                lda     #<OutFCB                ;point to FCB
   415 00:0AF8: A0 0B                ldy     #>OutFCB
   416 00:0AFA: 20 FD 08             jsr     MAKE
   417 00:0AFD: C9 FF                cmp     #255                    ;check for MAKE error
   418 00:0AFF: D0 07                bne     MAKEOK
   419 00:0B01: A9 B7                lda     #<DrFlMs                ;error - drive full
   420 00:0B03: A0 08                ldy     #>DrFlMs
   421 00:0B05: 4C 11 09             jmp     ERROR
   422 00:0B08: 20 40 0B     MAKEOK  jsr     GetRBf                  ;get character
   423 00:0B0B: F0 21                beq     LSTCHR                  ;close out if zero
   424 00:0B0D: 85 40                sta     ichar                   ;save
   425 00:0B0F: 8D F6 0B             sta     DskBuf                  ;also put in disk buffer
   426                        ; buff(i+1) <-- 0 and buff(i+2) <-- '$'
   427 00:0B12: AA                   tax                             ;make i an index
   428                        ;        lda     #0                      ;insert 0
   429 00:0B13: 9E F7 0B             stz     DskBuf+1,x              ;into buffer
   430 00:0B16: A9 24                lda     #'$'                    ;get $
   431 00:0B18: 9D F8 0B             sta     DskBuf+2,x
   432                        ;do while i>0
   433 00:0B1B: A6 40        DWIGT0  ldx     ichar                   ;see if > 0
   434 00:0B1D: F0 0A                beq     IEq0                    ;i = 0
   435 00:0B1F: 20 40 0B             jsr     GetRBf                  ;else keep getting
   436 00:0B22: 9D F6 0B             sta     DskBuf,x                ;and save
   437 00:0B25: C6 40                dec     ichar
   438 00:0B27: D0 F2                bne     DWIGT0                  ;and loop for more
   439 00:0B29: 20 CE 09     IEQ0    jsr     WrtBuf
   440 00:0B2C: 80 DA                bra     MAKEOK
   441 00:0B2E: A9 55        LSTCHR  lda     #<OutFCB                ;point to FCB
   442 00:0B30: A0 0B                ldy     #>OutFCB
   443 00:0B32: 20 E9 08             jsr     CLOSE
   444 00:0B35: C9 FF                cmp     #255
   445 00:0B37: D0 16                bne     OKCLS
   446 00:0B39: A9 C6                lda     #<NoClMs                ;close error
   447 00:0B3B: A0 08                ldy     #>NoClMs
   448 00:0B3D: 4C 11 09             jmp     ERROR
   449                        ;OKCLS   rts
   450                        ;
   451                        ;GetRBf after rbp <-- rbp-1
   452 00:0B40: 38           GetRBf  sec                             ;prepare for subtraction
   453 00:0B41: A5 38                lda     rbp                     ;get low
   454 00:0B43: E9 01                sbc     #1                      ;subtract 1
   455 00:0B45: 85 38                sta     rbp                     ;save
  Wed Apr 14 2021  0:03                                                                                                    Page 9


   456 00:0B47: A5 39                lda     rbp+1                   ;do same for high
   457 00:0B49: E9 00                sbc     #0
   458 00:0B4B: 85 39                sta     rbp+1                   ;save
   459                        ;        ldy     #0                      ;clear index
   460 00:0B4D: B2 38                lda     (rbp)                   ;get character
   461 00:0B4F: 60           OKCLS   rts
   462                        ;
   463                        ;line number string
   464 00:0B50: 30 30 31 20  LneNum  .byte   '001 $'
       00:0B54: 24 
   465             00000B50   LN1     equ     LneNum
   466             00000B51   LN2     equ     LneNum+1
   467             00000B52   LN3     equ     LneNum+2
   468                        ;Output FCB
   469 00:0B55: 00           OutFCB          .byte   0
   470 00:0B56: 24 24 24 20                  .byte   '$$$     SUB'
       00:0B5A: 20 20 20 20 
       00:0B5E: 53 55 42 
   471                        ;extent
   472 00:0B61: 00           dext            .byte   0
   473 00:0B62: 00 00 00                     .byte   0,0,0
   474 00:0B65:                              defs    16
   475                        ;record number for OutFCB
   476 00:0B75: 00           drec            .byte   0
   477                        ;substitute string
   478                        sstrng
   479 00:0B76:                              defs    128
   480                        ;disk buffer - replaces default
   481                        DskBuf
   482 00:0BF6:                              defs    128
   483                        ;read buffer
   484                        ;baseline allows 32 command lines at 4096 bytes total
   485                        ;If desired this can be increased.
   486                        rbuff
   487 00:0C76:                              defs    BufLng
   488                        lastrb
   489                                ends
   490                        
   491                                end


      Lines assembled: 491
      Errors: 0
